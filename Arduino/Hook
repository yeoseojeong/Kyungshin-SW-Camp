//asw.c

#include "bsw.h"

TASK(Task1){
   printfSerial("Task1 Begins...");
   mdelay(3000);
   printfSerial("Task1 Finishes...");
   TerminateTask();
}

TASK(Task2){

   printfSerial("Task2 Begins...");
   mdelay(3000);
   printfSerial("Task2 Finishes...");
   TerminateTask();
}

void printState(TaskType id){
	TaskStateType state;

	if(GetTaskState(id,&state)==E_OK){
		switch (state){
		case SUSPENDED:
			printfSerial("%d: suspended...",id);
			break;
		case READY:
			printfSerial("%d: ready...",id);
			break;
		case WAITING:
			printfSerial("%d: waiting...",id);
			break;
		case RUNNING:
			printfSerial("%d: running...",id);
			break;
		}
	}
}
ISR2(TimerISR)
{
   static long c = -4;
   IncrementCounter(counter1);
   printfSerial("\n%4ld",c++);
}

void StartupHook(void)
{
	printfSerial("..StartupHook..\n");

}

void ShutdownHook(StatusType Error)
{
	printfSerial("..ShutdownHook..\n");
	printState(Task1);
	printState(Task2);
}

void PreTaskHook(void)
{
	TaskType id;
	GetTaskID(&id);
	printfSerial("[PreTaskHook(%d)]",id);
	printState(Task1);
	printState(Task2);
}

void PostTaskHook(void)
{
	TaskType id;
		GetTaskID(&id);
		printfSerial("[PostTaskHook(%d)]",id);
		printState(Task1);
		printState(Task2);
}


//conf.oil

CPU mySystem {
    OS myOs {
      EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
      EE_OPT = "OS_EE_BUILD_DEBUG";

        USERESSCHEDULER = TRUE;
        CPU_DATA = AVR8 {
            MULTI_STACK = TRUE;
        };
        MCU_DATA = MEGA {
            MODEL = MEGA_328p;
        };
        LIB = ARDUINO {
            SDK_BOARD = UNO;
            VARIANT = CC {
                VERSION = "1.8.5";
            };
            STAND_ALONE = TRUE;        // Generate arduino libraries
        };
        KERNEL_TYPE = OSEK {
            CLASS = ECC2;    // Default
        };
    STARTUPHOOK = TRUE;
    SHUTDOWNHOOK = TRUE;
    PRETASKHOOK = TRUE;
    POSTTASKHOOK = TRUE;
    };

    
    APPDATA myApp {
        APP_SRC = "bsw.cpp";
        APP_SRC = "asw.c";
    };
    
    TASK Task1{
       PRIORITY = 1;
       STACK = SHARED;
       SCHEDULE = FULL;
       AUTOSTART = FALSE;
       ACTIVATION = 1;
    };
    
    TASK Task2{
        PRIORITY = 2;
       STACK = SHARED;
       SCHEDULE = FULL;
       AUTOSTART = FALSE;
       ACTIVATION = 1;
    };

       ISR TimerISR{
       CATEGORY = 2;
       SOURCE = "TIMER1_COMPA";
    };
    COUNTER counter1{
       MINCYCLE = 1;
       MAXALLOWEDVALUE = 127;
       TICKSPERBASE = 1;
    };
    ALARM alarm1{
       COUNTER = counter1;
       ACTION = ACTIVATETASK{
          TASK = Task1;
       };
       AUTOSTART = TRUE{
          ALARMTIME = 5;
          CYCLETIME = 10;
       };
    };
    ALARM alarm2{
       COUNTER = counter1;
       ACTION = ACTIVATETASK{
          TASK = Task2;
       };
       AUTOSTART = TRUE{
          ALARMTIME = 5;
          CYCLETIME = 20;
       };
    };

};

    

 //bsw.h

#ifndef BSW_H_
#define BSW_H_

#include "ee.h"
#include "Arduino.h"

#ifdef __cplusplus
extern "C"{
#endif

void mdelay(unsigned long delay_ms);

void printfSerial(const char *fmt, ... );

#ifdef __cplusplus
}
#endif

#endif /* BSW_H_ */

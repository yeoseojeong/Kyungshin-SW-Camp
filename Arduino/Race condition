//asw.c

#include "bsw.h"

volatile unsigned long shared = 0;

ISR2(TimerISR)
{
   IncrementCounter(counter1);
}

TASK(Task1){
      unsigned long i;
   printfSerial("Task1 Begins...\n");
   for(i = 0; i<1000000; i++){
      shared++;
   }
   printfSerial("Added 1000000 to shared\n");
   printfSerial("shared = %4lu\n", shared);
   printfSerial("Task1 finishes...");
   TerminateTask();
}

TASK(Task2){
	static unsigned long i=0;
	if(i<1000)
	{
		shared++;
	}
	else if(i==1000)
	{
		printfSerial("Added 1000 to shared\n");
	}
   i++;
   TerminateTask();
}






//conf.oil

CPU mySystem {
    OS myOs {
      EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
      EE_OPT = "OS_EE_BUILD_DEBUG";

        USERESSCHEDULER = TRUE;
        CPU_DATA = AVR8 {
            MULTI_STACK = TRUE;
        };
        MCU_DATA = MEGA {
            MODEL = MEGA_328p;
        };
        LIB = ARDUINO {
            SDK_BOARD = UNO;
            VARIANT = CC {
                VERSION = "1.8.5";
            };
            STAND_ALONE = TRUE;        // Generate Arduino libraries
        };
        KERNEL_TYPE = OSEK {
            CLASS = ECC2;    // Default
        };
    };
    
    APPDATA myApp {
        APP_SRC = "bsw.cpp";
        APP_SRC = "asw.c";
    };
   
    COUNTER counter1{
       MINCYCLE = 1;
       MAXALLOWEDVALUE = 127;
       TICKSPERBASE = 1;
    };
       

    ALARM alarm1{
    	COUNTER = counter1;
    	ACTION = ACTIVATETASK{
    		    	TASK = Task2;
    };
    AUTOSTART = TRUE{
    	ALARMTIME = 0;
    	CYCLETIME = 1;
    };
   };
   
   
    TASK Task1{
       PRIORITY = 1;
       STACK = SHARED;
       SCHEDULE = FULL;
       AUTOSTART = TRUE;
       ACTIVATION = 1;
    };
    
    TASK Task2{
        PRIORITY = 2;
       STACK = SHARED;
       SCHEDULE = FULL;
       AUTOSTART = FALSE;
       ACTIVATION = 1;
    };

       ISR TimerISR{
       CATEGORY = 2;
       SOURCE = "TIMER1_COMPA";
    	};
    };
    

//bsw.h

#ifndef BSW_H_
#define BSW_H_

#include "ee.h"
#include "Arduino.h"

#ifdef __cplusplus
extern "C"{
#endif

void mdelay(unsigned long delay_ms);

void printfSerial(const char *fmt, ... );

#ifdef __cplusplus
}
#endif

#endif /* BSW_H_ */


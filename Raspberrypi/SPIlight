#include <fcntl.h>
#include <linux/spi/spidev.h>
#include <linux/types.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <unistd.h>

#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))

static const char *DEVICE = "/dev/spidev0.0";
static uint8_t MODE = 0;
static uint8_t BITS = 8;
static uint32_t CLOCK = 1000000;
static uint16_t DELAY = 5;

static int prepare(int fd) {
  if (ioctl(fd, SPI_IOC_WR_MODE, &MODE) == -1) {
    perror("Can't set MODE");
    return -1;
  }

  if (ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &BITS) == -1) {
    perror("Can't set number of BITS");
    return -1;
  }

  if (ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &CLOCK) == -1) {
    perror("Can't set write CLOCK");
    return -1;
  }

  if (ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &CLOCK) == -1) {
    perror("Can't set read CLOCK");
    return -1;
  }

  return 0;
}

void spi_cs_select(int fd, int value) {
    // CS를 활성화 (Low, value = 0), CS를 비활성화 (High, value = 1)
    if (ioctl(fd, SPI_IOC_WR_MODE32, &value) < 0)
        perror("Error selecting CS");
}

uint8_t control_first_8bits(uint8_t channel) {
  return 0x06|((channel & 0x07) >> 2);
}

uint8_t control_second_8bits(uint8_t channel) {
  return (channel & 0x07) << 6;
}

int readadc(int fd, uint8_t channel) {
    spi_cs_select(fd, 0);

  uint8_t tx[] = {control_first_8bits(channel), control_second_8bits(channel), 0};
  uint8_t rx[3];

  struct spi_ioc_transfer tr = {
      .tx_buf = (unsigned long)tx,
      .rx_buf = (unsigned long)rx,
      .len = ARRAY_SIZE(tx),
      .delay_usecs = DELAY,
      .speed_hz = CLOCK,
      .bits_per_word = BITS,
  };

  if (ioctl(fd, SPI_IOC_MESSAGE(1), &tr) == 1) {
    perror("IO Error");
    abort();
  }

  spi_cs_select(fd, 1);

  return ((rx[1] & 0x0f) << 8) | rx[2];
}

int main(int argc, char **argv) {
  int fd = open(DEVICE, O_RDWR);
  if (fd <= 0) {
    perror("Device open error");
    return -1;
  }

  if (prepare(fd) == -1) {
    perror("Device prepare error");
    return -1;
  }

  while (1) {
    printf("value: %d\n", readadc(fd, 0));
    usleep(500000);
  }



}
